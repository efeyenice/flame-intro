name: CD â€“ deploy to Azure

on:
  workflow_run:
    workflows: ["Flutter CI"]
    types: [completed]

permissions:
  contents: read
  actions:  read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download tag from CI
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: image-tag
          path: ./image-tag
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - id: readtag
        run: echo "TAG=$(cat image-tag/tag.txt)" >> $GITHUB_OUTPUT

      # Verify Azure providers are registered
      - name: Verify Azure providers
        run: |
          echo "Checking Azure provider registration status..."
          
          # Check Container Instance provider
          CI_STATUS=$(az provider show -n Microsoft.ContainerInstance --query registrationState --output tsv)
          echo "Container Instance provider: $CI_STATUS"
          
          # Check PostgreSQL provider  
          PG_STATUS=$(az provider show -n Microsoft.DBforPostgreSQL --query registrationState --output tsv)
          echo "PostgreSQL provider: $PG_STATUS"
          
          # Register if needed (but don't wait)
          if [ "$CI_STATUS" != "Registered" ]; then
            echo "Registering Container Instance provider..."
            az provider register --namespace Microsoft.ContainerInstance
          fi
          
          if [ "$PG_STATUS" != "Registered" ]; then
            echo "Registering PostgreSQL provider..."
            az provider register --namespace Microsoft.DBforPostgreSQL
          fi

      # Run database migrations
      - name: Run database migrations
        run: |
          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Wait for database connection and run schema
          until pg_isready -h ${{ secrets.AZURE_DB_HOST }} -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
            echo "Waiting for database..."
            sleep 5
          done
          
          # Apply database schema
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h ${{ secrets.AZURE_DB_HOST }} -p 5432 -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -f backend/database/schema.sql || echo "Schema already exists or migration completed"

      # Deploy containers to allowed region (France Central)
      - name: Deploy backend container
        run: |
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name flame-intro-backend \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.readtag.outputs.TAG }} \
            --location francecentral \
            --environment-variables \
              DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.AZURE_DB_HOST }}:5432/${{ secrets.POSTGRES_DB }} \
              PORT=8000 \
              CORS_ORIGIN=${{ secrets.CORS_ORIGIN }} \
            --ports 8000 \
            --memory 1 \
            --cpu 0.5 \
            --restart-policy Always

      # Deploy frontend to existing web app
      - name: Deploy frontend to web app
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          images: ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}

      # Health check
      - name: Health check
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
          
          # Check backend health
          curl -f ${{ secrets.API_URL }}/api/health || echo "Backend health check failed"
          
          # Check frontend
          curl -f ${{ secrets.FRONTEND_URL }} || echo "Frontend health check failed"
