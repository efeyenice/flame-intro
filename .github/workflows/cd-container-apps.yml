name: CD – Deploy to Azure Container Apps

on:
  workflow_run:
    workflows: ["Flutter CI"]
    types: [completed]

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set error handling
        run: |
          set -euo pipefail
          echo "🔧 Error handling enabled: script will fail fast on any error"
      
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download tag from CI
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: image-tag
          path: ./image-tag
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - id: readtag
        run: echo "TAG=$(cat image-tag/tag.txt)" >> $GITHUB_OUTPUT

      # Install required tools
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl postgresql-client

      # Step 1: Deploy backend first to get URL
      - name: Deploy Backend Container App
        id: deploy-backend
        run: |
          set -euo pipefail
          echo "🚀 Deploying backend container app..."
          
          # Check if Container Apps environment exists
          echo "📦 Checking for existing Container App Environment..."
          if az containerapp env show -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n flame-intro-env-v2 >/dev/null 2>&1; then
            echo "✅ Container Apps environment already exists – skipping infrastructure creation"
          else
            echo "📦 Creating Container Apps environment and supporting infrastructure..."
            
            # Ensure resource group exists
            if ! az group show --name ${{ secrets.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
              echo "📦 Creating resource group..."
              az group create \
                --name ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --location francecentral
            fi
            
            # Create Log Analytics workspace if it doesn't exist
            echo "📊 Creating Log Analytics workspace..."
            az monitor log-analytics workspace create \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --workspace-name flame-intro-v2-logs \
              --location francecentral \
              --sku PerGB2018 \
              --retention-time 30 \
              2>/dev/null || echo "Log Analytics workspace already exists or creation completed"
            
            # Create VNet if it doesn't exist
            echo "🌐 Creating Virtual Network..."
            az network vnet create \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name flame-intro-v2-vnet \
              --location francecentral \
              --address-prefixes 10.0.0.0/16 \
              --subnet-name container-apps-subnet \
              --subnet-prefixes 10.0.0.0/21 \
              2>/dev/null || echo "VNet already exists or creation completed"
            
            # Get workspace details
            WORKSPACE_ID=$(az monitor log-analytics workspace show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --workspace-name flame-intro-v2-logs \
              --query customerId \
              --output tsv)
            
            WORKSPACE_KEY=$(az monitor log-analytics workspace get-shared-keys \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --workspace-name flame-intro-v2-logs \
              --query primarySharedKey \
              --output tsv)
            
            # Get subnet ID
            SUBNET_ID=$(az network vnet subnet show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --vnet-name flame-intro-v2-vnet \
              --name container-apps-subnet \
              --query id \
              --output tsv)
            
            # Create Container Apps environment
            echo "🏗️ Creating Container Apps environment..."
            az containerapp env create \
              --name flame-intro-env-v2 \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location francecentral \
              --logs-workspace-id "$WORKSPACE_ID" \
              --logs-workspace-key "$WORKSPACE_KEY" \
              --infrastructure-subnet-resource-id "$SUBNET_ID"
            
            echo "✅ Container Apps environment created successfully"
          fi
          
          # Get environment ID
          echo "🔍 Getting environment ID for backend deployment..."
          ENVIRONMENT_ID=$(az containerapp env show \
            --name flame-intro-env-v2 \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query id \
            --output tsv)
          
          echo "✅ Found environment ID: $ENVIRONMENT_ID"
          
          # Deploy or update backend
          echo "🚀 Deploying backend container app..."
          az containerapp create \
            --name flame-intro-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --environment "$ENVIRONMENT_ID" \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.readtag.outputs.TAG }} \
            --target-port 8000 \
            --ingress external \
            --registry-server index.docker.io \
            --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKERHUB_TOKEN }} \
            --env-vars \
              DATABASE_URL=secretref:database-url \
              PORT=8000 \
              CORS_ORIGIN=${{ secrets.CORS_ORIGIN }} \
            --secrets \
              database-url="postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.AZURE_DB_HOST }}:5432/${{ secrets.POSTGRES_DB }}" \
            --cpu 0.5 \
            --memory 1Gi \
            --min-replicas 1 \
            --max-replicas 3 \
            --output table \
            2>/dev/null \
            || az containerapp update \
              --name flame-intro-backend \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.readtag.outputs.TAG }} \
              --output table
          
          # Get backend URL
          BACKEND_FQDN=$(az containerapp show \
            --name flame-intro-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          BACKEND_URL="https://$BACKEND_FQDN"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "✅ Backend deployed at: $BACKEND_URL"

      # Step 2: Run database migrations
      - name: Run database migrations
        run: |
          set -euo pipefail
          echo "🗄️ Running database migrations..."
          until pg_isready -h ${{ secrets.AZURE_DB_HOST }} -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
            echo "Waiting for database..."
            sleep 5
          done
          
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql \
            -h ${{ secrets.AZURE_DB_HOST }} \
            -p 5432 \
            -U ${{ secrets.POSTGRES_USER }} \
            -d ${{ secrets.POSTGRES_DB }} \
            -f backend/database/schema.sql \
            || echo "Schema already exists or migration completed"

      # Step 3: Build frontend with correct API URL
      - name: Build and push frontend with backend URL
        run: |
          set -euo pipefail
          echo "🎨 Building frontend with API URL: ${{ steps.deploy-backend.outputs.BACKEND_URL }}"
          
          # Build frontend with correct API URL
          docker build \
            --build-arg API_URL=${{ steps.deploy-backend.outputs.BACKEND_URL }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api \
            ./flame_intro
          
          # Push the updated image
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api

      # Step 4: Deploy frontend
      - name: Deploy Frontend Container App
        id: deploy-frontend
        run: |
          set -euo pipefail
          echo "🎮 Deploying frontend container app..."
          
          # Get environment ID
          ENVIRONMENT_ID=$(az containerapp env show \
            --name flame-intro-env-v2 \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query id \
            --output tsv)
          
          # Deploy or update frontend
          echo "🚀 Deploying frontend container app..."
          az containerapp create \
            --name flame-intro-frontend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --environment "$ENVIRONMENT_ID" \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api \
            --target-port 80 \
            --ingress external \
            --registry-server index.docker.io \
            --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKERHUB_TOKEN }} \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 1 \
            --max-replicas 5 \
            --output table \
            2>/dev/null \
            || az containerapp update \
              --name flame-intro-frontend \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api \
              --output table
          
          # Get frontend URL
          FRONTEND_FQDN=$(az containerapp show \
            --name flame-intro-frontend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          FRONTEND_URL="https://$FRONTEND_FQDN"
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "✅ Frontend deployed at: $FRONTEND_URL"

      # Step 5: Update backend CORS with frontend URL
      - name: Update backend CORS configuration
        run: |
          set -euo pipefail
          echo "🔗 Updating backend CORS configuration..."
          az containerapp update \
            --name flame-intro-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --set-env-vars CORS_ORIGIN=${{ steps.deploy-frontend.outputs.FRONTEND_URL }}

      # Step 6: Health checks and validation
      - name: Comprehensive health checks
        run: |
          set -euo pipefail
          echo "🔍 Running comprehensive health checks..."
          sleep 60
          
          # Check backend health
          echo "Checking backend health..."
          for i in {1..5}; do
            if curl -f ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/health; then
              echo "✅ Backend health check passed"
              break
            else
              echo "⏳ Backend health check attempt $i/5 failed, retrying..."
              sleep 10
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Backend health check failed after 5 attempts"
              exit 1
            fi
          done
          
          # Check frontend
          echo "Checking frontend..."
          for i in {1..5}; do
            if curl -f ${{ steps.deploy-frontend.outputs.FRONTEND_URL }}; then
              echo "✅ Frontend health check passed"
              break
            else
              echo "⏳ Frontend health check attempt $i/5 failed, retrying..."
              sleep 10
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Frontend health check failed after 5 attempts"
              exit 1
            fi
          done
          
          # Test API connectivity from a separate request
          echo "Testing API connectivity..."
          API_RESPONSE=$(curl -s ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/leaderboard)
          if echo "$API_RESPONSE" | jq -e '.leaderboard' > /dev/null; then
            echo "✅ API connectivity test passed"
          else
            echo "❌ API connectivity test failed"
            echo "Response: $API_RESPONSE"
            exit 1
          fi

      # Step 7: Output final URLs
      - name: Deployment Summary
        run: |
          set -euo pipefail
          echo "🎉 Deployment completed successfully!"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.FRONTEND_URL }}"
          echo "Backend URL: ${{ steps.deploy-backend.outputs.BACKEND_URL }}"
          echo ""
          echo "🔗 Test the application:"
          echo "Game: ${{ steps.deploy-frontend.outputs.FRONTEND_URL }}"
          echo "API Health: ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/health"
          echo "Leaderboard: ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/leaderboard" 