name: CD – Deploy to Azure Container Apps

on:
  workflow_run:
    workflows: ["Flutter CI"]
    types: [completed]

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set error handling
        run: |
          set -euo pipefail
          echo "🔧 Error handling enabled: script will fail fast on any error"
      
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download tag from CI
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: image-tag
          path: ./image-tag
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - id: readtag
        run: echo "TAG=$(cat image-tag/tag.txt)" >> $GITHUB_OUTPUT

      # Install required tools
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl postgresql-client

      # Step 1: Deploy backend first to get URL
      - name: Deploy Backend Container App
        id: deploy-backend
        run: |
          set -euo pipefail
          echo "🚀 Deploying backend container app..."
          
          # Check if environment exists, create infrastructure if not
          echo "📦 Checking for existing Container App Environment..."
          ENVIRONMENT_EXISTS=$(az containerapp env list \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query "[?name=='flame-intro-env-v2'].name" \
            --output tsv 2>/dev/null || echo "")
          
          if [ -z "$ENVIRONMENT_EXISTS" ]; then
            echo "📦 Creating Container App Environment and infrastructure..."
            
            # First check if supporting resources exist
            WORKSPACE_EXISTS=$(az monitor log-analytics workspace list \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --query "[?name=='flame-intro-v2-logs'].name" \
              --output tsv 2>/dev/null || echo "")
            
            VNET_EXISTS=$(az network vnet list \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --query "[?name=='flame-intro-v2-vnet'].name" \
              --output tsv 2>/dev/null || echo "")
            
            # Determine if we need to create new infrastructure
            FORCE_NEW="true"
            if [ -n "$WORKSPACE_EXISTS" ] && [ -n "$VNET_EXISTS" ]; then
              echo "✅ Supporting infrastructure exists, will reference existing resources"
              FORCE_NEW="false"
            else
              echo "📦 Creating new infrastructure resources"
              FORCE_NEW="true"
            fi
            
            # Deploy environment with proper error handling
            echo "🔧 Deploying Container App Environment..."
            az deployment group create \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --template-file azure/container-app-environment.bicep \
              --parameters \
                location=francecentral \
                environmentName=flame-intro-env-v2 \
                forceNew=$FORCE_NEW \
              --output table
            
            echo "✅ Container App Environment deployment completed"
          else
            echo "✅ Environment already exists: $ENVIRONMENT_EXISTS"
          fi
          
          # Get environment ID with retry
          echo "🔍 Getting environment ID for backend deployment..."
          for i in {1..5}; do
            ENVIRONMENT_ID=$(az containerapp env show \
              --name flame-intro-env-v2 \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --query id \
              --output tsv 2>/dev/null)
            
            if [ -n "$ENVIRONMENT_ID" ]; then
              echo "✅ Found environment ID: $ENVIRONMENT_ID"
              break
            else
              echo "⏳ Attempt $i/5: Environment not ready, waiting 30s..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Failed to get environment ID after 5 attempts"
              exit 1
            fi
          done
          
          # Deploy or update backend
          echo "🚀 Deploying backend container app..."
          az containerapp create \
            --name flame-intro-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --environment "$ENVIRONMENT_ID" \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.readtag.outputs.TAG }} \
            --target-port 8000 \
            --ingress external \
            --registry-server index.docker.io \
            --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKERHUB_TOKEN }} \
            --env-vars \
              DATABASE_URL=secretref:database-url \
              PORT=8000 \
              CORS_ORIGIN=${{ secrets.CORS_ORIGIN }} \
            --secrets \
              database-url="postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.AZURE_DB_HOST }}:5432/${{ secrets.POSTGRES_DB }}" \
            --cpu 0.5 \
            --memory 1Gi \
            --min-replicas 1 \
            --max-replicas 3 \
            --output table \
            2>/dev/null \
            || az containerapp update \
              --name flame-intro-backend \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.readtag.outputs.TAG }} \
              --output table
          
          # Get backend URL
          BACKEND_FQDN=$(az containerapp show \
            --name flame-intro-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          BACKEND_URL="https://$BACKEND_FQDN"
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "✅ Backend deployed at: $BACKEND_URL"

      # Step 2: Run database migrations
      - name: Run database migrations
        run: |
          set -euo pipefail
          echo "🗄️ Running database migrations..."
          until pg_isready -h ${{ secrets.AZURE_DB_HOST }} -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
            echo "Waiting for database..."
            sleep 5
          done
          
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql \
            -h ${{ secrets.AZURE_DB_HOST }} \
            -p 5432 \
            -U ${{ secrets.POSTGRES_USER }} \
            -d ${{ secrets.POSTGRES_DB }} \
            -f backend/database/schema.sql \
            || echo "Schema already exists or migration completed"

      # Step 3: Build frontend with correct API URL
      - name: Build and push frontend with backend URL
        run: |
          set -euo pipefail
          echo "🎨 Building frontend with API URL: ${{ steps.deploy-backend.outputs.BACKEND_URL }}"
          
          # Build frontend with correct API URL
          docker build \
            --build-arg API_URL=${{ steps.deploy-backend.outputs.BACKEND_URL }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api \
            ./flame_intro
          
          # Push the updated image
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api

      # Step 4: Deploy frontend
      - name: Deploy Frontend Container App
        id: deploy-frontend
        run: |
          set -euo pipefail
          echo "🎮 Deploying frontend container app..."
          
          # Get environment ID
          ENVIRONMENT_ID=$(az containerapp env show \
            --name flame-intro-env-v2 \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query id \
            --output tsv)
          
          # Deploy or update frontend
          echo "🚀 Deploying frontend container app..."
          az containerapp create \
            --name flame-intro-frontend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --environment "$ENVIRONMENT_ID" \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api \
            --target-port 80 \
            --ingress external \
            --registry-server index.docker.io \
            --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKERHUB_TOKEN }} \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 1 \
            --max-replicas 5 \
            --output table \
            2>/dev/null \
            || az containerapp update \
              --name flame-intro-frontend \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.readtag.outputs.TAG }}-with-api \
              --output table
          
          # Get frontend URL
          FRONTEND_FQDN=$(az containerapp show \
            --name flame-intro-frontend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          FRONTEND_URL="https://$FRONTEND_FQDN"
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "✅ Frontend deployed at: $FRONTEND_URL"

      # Step 5: Update backend CORS with frontend URL
      - name: Update backend CORS configuration
        run: |
          set -euo pipefail
          echo "🔗 Updating backend CORS configuration..."
          az containerapp update \
            --name flame-intro-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --set-env-vars CORS_ORIGIN=${{ steps.deploy-frontend.outputs.FRONTEND_URL }}

      # Step 6: Health checks and validation
      - name: Comprehensive health checks
        run: |
          set -euo pipefail
          echo "🔍 Running comprehensive health checks..."
          sleep 60
          
          # Check backend health
          echo "Checking backend health..."
          for i in {1..5}; do
            if curl -f ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/health; then
              echo "✅ Backend health check passed"
              break
            else
              echo "⏳ Backend health check attempt $i/5 failed, retrying..."
              sleep 10
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Backend health check failed after 5 attempts"
              exit 1
            fi
          done
          
          # Check frontend
          echo "Checking frontend..."
          for i in {1..5}; do
            if curl -f ${{ steps.deploy-frontend.outputs.FRONTEND_URL }}; then
              echo "✅ Frontend health check passed"
              break
            else
              echo "⏳ Frontend health check attempt $i/5 failed, retrying..."
              sleep 10
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Frontend health check failed after 5 attempts"
              exit 1
            fi
          done
          
          # Test API connectivity from a separate request
          echo "Testing API connectivity..."
          API_RESPONSE=$(curl -s ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/leaderboard)
          if echo "$API_RESPONSE" | jq -e '.leaderboard' > /dev/null; then
            echo "✅ API connectivity test passed"
          else
            echo "❌ API connectivity test failed"
            echo "Response: $API_RESPONSE"
            exit 1
          fi

      # Step 7: Output final URLs
      - name: Deployment Summary
        run: |
          set -euo pipefail
          echo "🎉 Deployment completed successfully!"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.FRONTEND_URL }}"
          echo "Backend URL: ${{ steps.deploy-backend.outputs.BACKEND_URL }}"
          echo ""
          echo "🔗 Test the application:"
          echo "Game: ${{ steps.deploy-frontend.outputs.FRONTEND_URL }}"
          echo "API Health: ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/health"
          echo "Leaderboard: ${{ steps.deploy-backend.outputs.BACKEND_URL }}/api/leaderboard" 