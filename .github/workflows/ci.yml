name: Flutter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: flame_intro
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true   
      - run: flutter pub get
      - run: flutter analyze --no-fatal-infos
      - run: flutter test || true  # Allow proceeding if no tests
      - run: flutter build web --release --base-href /flame-intro/
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: flame_intro/build/web      
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        id: deploy

  test_backend:
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - run: npm run test || true  # Allow proceeding if no tests yet

  security_scan:
    needs: [test, test_backend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - id: meta
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
      
      # Build backend image for scanning
      - name: Build backend image
        run: |
          docker build -t backend-scan:${{ steps.meta.outputs.sha }} ./backend
      
      # Build frontend image for scanning
      - name: Build frontend image
        run: |
          docker build -t frontend-scan:${{ steps.meta.outputs.sha }} ./flame_intro
      
      # Scan backend image with Trivy
      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: backend-scan:${{ steps.meta.outputs.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: 1
      
      # Scan frontend image with Trivy
      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: frontend-scan:${{ steps.meta.outputs.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: 1
      
      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results - Backend
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-security'
      
      - name: Upload Trivy scan results - Frontend
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-security'

  build_images:
    needs: [security_scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: meta
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
      
      # Build and push backend image
      - name: Build & push backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.meta.outputs.sha }} ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro-backend:${{ steps.meta.outputs.sha }}
      
      # Build and push frontend image
      - name: Build & push frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.meta.outputs.sha }} ./flame_intro
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flame-intro:${{ steps.meta.outputs.sha }}
      
      - name: Save tag
        run: echo "${{ steps.meta.outputs.sha }}" > tag.txt
      - uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: tag.txt 
